!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("pz_storage",[],t):"object"==typeof exports?exports.pz_storage=t():e.pz_storage=t()}(window,(function(){return function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){e.exports=r(1)},function(e,t,r){"use strict";r.r(t),function(){var e="_localStorage";try{localStorage.setItem(e,"test")}catch(e){var t=function(){};localStorage.__proto__={setItem:t,getItem:t,removeItem:t,clear:t}}"test"===localStorage.getItem(e)&&localStorage.removeItem(e)}();let o={storage:window.localStorage,session:{storage:window.sessionStorage}},n=[];const i={set(e,t,r=2){t&&(n.push({key:e,value:t,expired:r,startTime:Date.now()}),this.storage.setItem(e,s(t)))},get(e){if(!e)return;const t=a(e);return t||(this.storage.removeItem(e),n=n.filter(t=>t.key!==e)),t},remove(e){e&&(this.storage.removeItem(e),n=n.filter(t=>t.key!==e))},clear(){this.storage.clear(),n=[]},setList(e){for(let t in e)n.push({key:t,value:e[t]}),this.storage.setItem(t,s(e[t]))},getList(e){let t={};for(let r of e)if(this.storage.getItem(r)){let e=a(r);e||(this.storage.removeItem(r),n=n.filter(e=>e.key!==r)),t[r]=e}return t},removeList(e){for(let t of e)this.storage.removeItem(t),n=n.filter(e=>e.key!==t)}},s=function(e){if(!e)return;let t="";const r=Object.prototype.toString.call(e);return t="[object Object]"===r||"[object Array]"===r?JSON.stringify(e):e,t},a=function(e){if(!e)return;let t="";return n.map(r=>{r.expired&&Date.now()>r.startTime+36e5*r.expired?t="":r.key===e&&(t=r.value)}),t};Object.assign(o,i),Object.assign(o.session,i),t.default=o}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,